/ Selects

/ Defaults
- this.select = {}
- this.select.id = this.createId()
- this.select.tabindex = false
- this.select.required = false
- this.select.default = {label: 'Select an option', selected: true, value: ''}
- this.select.js = false
- this.select.ariaControls = false
- this.select.name = `select['${this.select.id}']`

/ Inherit overrides
- if (typeof select !== 'undefined')
  - this.select = Object.assign(this.select, select);

div class='select ${this.select.class}'
  /! { @name           The data attribute for the select value when the form is serialized }
  /! { @id             Used by the select's corresponding label "for" attribute }
  /! { @required       "true" specifies wether a value for the select is required }
  /! { @aria-controls  Can be used to target another element by ID and toggle it's visibility when this select has a value }
  /! { @tabindex       Add "-1" to insure focusable elements are not visible when parent's aria-hidden attribute is "true" }
  select id='${this.select.id}' name='${this.select.name}' data-js=this.select.js aria-controls=this.select.ariaControls tabindex=this.select.tabindex required=this.select.required
    option value='${this.select.default.value}' selected='${this.select.default.selected}'
      = this.select.default.label

    - for (let i in this.select.options)
      - option = this.select.options[i];
      - value = (option.value) ? option.value : this.createSlug(option.label)

      option value='${value}' = option.label

  /! { @tabindex   Add "-1" to insure focusable elements are not visible when parent's aria-hidden attribute is "true" }
  svg class='select__graphic' aria-hidden='true' tabindex=this.select.tabindex
    use href='#select-nyco-chevrons'
